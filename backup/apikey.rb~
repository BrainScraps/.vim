class Feature < ActiveRecord::Base
  has_and_belongs_to_many :assortments
  validates :name, :presence => true

  def self.feature_ids
    all.map(&:id)
  end

  def self.list
    features = {}
    all.map { |feature| features[feature.id] = feature.name }
    features
  end

  def self.producer_permissions(producer)
    features = {}
    feature_ids.map { |id| features[id] = producer.has_feature?(id) ? 1 : 0}
    features
  end

  # Takes an string array "[1,2,3]" and
  # If all ids map to valid Features, returns a Hash of features... {1: Feature, 2: Feature}
  # If there are bad ids, returns an Array of bad ids... [13131, 1337]
  def self.check_features(feature_array)
    feature_array = feature_array.gsub(/(\[|\]|\s)/, "").split(",").map(&:to_i)
    exist = feature_array - self.feature_ids

    if exist.empty? # this means that there were no bad ids
      feature_hash = {}
      feature_array.map{|feature_id| feature_hash[feature_id] = Feature.find(feature_id) }
      feature_hash
    else # this means that there WERE bad ids!
      exist
    end
  end
end
